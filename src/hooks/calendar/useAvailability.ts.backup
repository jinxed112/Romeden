import { useState, useCallback, useEffect, useMemo } from 'react';
import { DisponibiliteJour } from '../../utils/types';
import { dateToString } from '../../utils/calendar/calendarUtils';

// Import du nouveau service Supabase
import {
  loadDisponibilites,
  setAvailabilityForDate,
  removeCustomAvailability,
  getAvailabilityForDate,
  getDateStatus,
  isDateAvailableForBooking,
  blockDateRange,
  unblockDateRange,
  getAvailabilityForMonth,
  setMultipleDatesAvailable
} from '../../services/availabilityService';

export const useAvailability = () => {
  const [disponibilites, setDisponibilites] = useState<DisponibiliteJour[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [updateTrigger, setUpdateTrigger] = useState(0);

  // ================================
  // CHARGEMENT INITIAL - SUPABASE
  // ================================
  
  useEffect(() => {
    const loadData = async () => {
      try {
        setIsLoading(true);
        console.log('üìä Chargement disponibilit√©s depuis Supabase...');
        
        const data = await loadDisponibilites();
        console.log('‚úÖ Charg√©', data.length, 'disponibilit√©s');
        setDisponibilites(data);
        
      } catch (error) {
        console.error('‚ùå Erreur chargement disponibilit√©s:', error);
        setDisponibilites([]);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, [updateTrigger]);

  // Force le rechargement des donn√©es
  const forceReload = useCallback(() => {
    console.log('üîÑ Force rechargement...');
    setUpdateTrigger(prev => prev + 1);
  }, []);

  // ================================
  // ACTIONS CRUD - SUPABASE
  // ================================

  // D√©finir disponibilit√© d'une date
  const setDateAvailability = useCallback(async (date: Date, availability: Partial<DisponibiliteJour>) => {
    const dateStr = dateToString(date);
    
    console.log('üíæ Sauvegarde disponibilit√©:', {
      date: dateStr,
      availability
    });
    
    try {
      const success = await setAvailabilityForDate(dateStr, availability);
      
      if (success) {
        console.log('‚úÖ Sauvegarde r√©ussie');
        // Recharger les donn√©es
        forceReload();
        return true;
      } else {
        throw new Error('√âchec sauvegarde Supabase');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde:', error);
      // Optionnel : afficher une notification d'erreur √† l'utilisateur
      alert('‚ùå Erreur de sauvegarde. V√©rifiez votre connexion.');
      return false;
    }
  }, [forceReload]);

  // Supprimer disponibilit√© personnalis√©e
  const removeCustomDateAvailability = useCallback(async (date: Date) => {
    const dateStr = dateToString(date);
    
    console.log('üóëÔ∏è Suppression disponibilit√© personnalis√©e:', dateStr);
    
    try {
      const success = await removeCustomAvailability(dateStr);
      
      if (success) {
        console.log('‚úÖ Suppression r√©ussie');
        forceReload();
        return true;
      } else {
        throw new Error('√âchec suppression Supabase');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error);
      alert('‚ùå Erreur de suppression. V√©rifiez votre connexion.');
      return false;
    }
  }, [forceReload]);

  // Bloquer une plage de dates
  const blockDates = useCallback(async (startDate: Date, endDate: Date, motif: string) => {
    const startStr = dateToString(startDate);
    const endStr = dateToString(endDate);
    
    try {
      const success = await blockDateRange(startStr, endStr, motif);
      if (success) {
        forceReload();
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Erreur blocage plage:', error);
      return false;
    }
  }, [forceReload]);

  // D√©bloquer une plage de dates
  const unblockDates = useCallback(async (startDate: Date, endDate: Date) => {
    const startStr = dateToString(startDate);
    const endStr = dateToString(endDate);
    
    try {
      const success = await unblockDateRange(startStr, endStr);
      if (success) {
        forceReload();
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Erreur d√©blocage plage:', error);
      return false;
    }
  }, [forceReload]);

  // Rendre plusieurs dates disponibles
  const setMultipleDatesAvailableAction = useCallback(async (dates: Date[], majoration?: number) => {
    try {
      const success = await setMultipleDatesAvailable(dates, majoration);
      if (success) {
        forceReload();
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Erreur dates multiples:', error);
      return false;
    }
  }, [forceReload]);

  // ================================
  // LECTURE - CACHE + SUPABASE
  // ================================

  // Obtenir le statut d'une date (utilise le cache local d'abord)
  const getDateInfo = useCallback(async (date: Date) => {
    // D'abord chercher dans le cache local
    const dateStr = dateToString(date);
    const cached = disponibilites.find(d => d.date === dateStr);
    
    if (cached) {
      // Retourner le format attendu
      return {
        statut: cached.statut,
        majoration: cached.majoration,
        motif: cached.motif,
        isCustom: true
      };
    }
    
    // Sinon, appeler Supabase
    return await getDateStatus(date);
  }, [disponibilites]);

  // V√©rifier si une date est disponible pour r√©servation
  const isAvailableForBooking = useCallback(async (date: Date) => {
    return await isDateAvailableForBooking(date);
  }, []);

  // Obtenir disponibilit√© sp√©cifique d'une date
  const getCustomAvailability = useCallback(async (date: Date) => {
    const dateStr = dateToString(date);
    
    // D'abord chercher dans le cache local
    const cached = disponibilites.find(d => d.date === dateStr);
    if (cached) {
      return cached;
    }
    
    // Sinon appeler Supabase
    return await getAvailabilityForDate(dateStr);
  }, [disponibilites]);

  // Obtenir toutes les disponibilit√©s d'un mois
  const getMonthAvailability = useCallback(async (year: number, month: number) => {
    return await getAvailabilityForMonth(year, month);
  }, []);

  // ================================
  // STATISTIQUES
  // ================================

  // Statistiques du mois (optimis√© avec cache local)
  const getMonthStats = useCallback(async (year: number, month: number) => {
    // Charger les donn√©es du mois depuis Supabase
    const monthAvailability = await getAvailabilityForMonth(year, month);
    
    const stats = {
      totalDays: new Date(year, month + 1, 0).getDate(),
      availableDays: 0,
      blockedDays: 0,
      reservedDays: 0,
      customMajorations: 0
    };

    // Compter pour chaque jour du mois
    for (let day = 1; day <= stats.totalDays; day++) {
      const date = new Date(year, month, day);
      const dateStr = dateToString(date);
      
      // Chercher dans les donn√©es du mois
      const dayData = monthAvailability.find(d => d.date === dateStr);
      
      if (dayData) {
        switch (dayData.statut) {
          case 'disponible':
            stats.availableDays++;
            break;
          case 'bloque':
          case 'indisponible':
            stats.blockedDays++;
            break;
          case 'reserve':
            stats.reservedDays++;
            break;
        }
        
        if (dayData.majoration > 0) {
          stats.customMajorations++;
        }
      } else {
        // Pas de donn√©es = indisponible par d√©faut
        stats.blockedDays++;
      }
    }

    return stats;
  }, []);

  // ================================
  // HELPERS POUR L'UI
  // ================================

  // V√©rifier si une date a une disponibilit√© personnalis√©e (utilise cache)
  const hasCustomAvailability = useCallback((date: Date) => {
    const dateStr = dateToString(date);
    return disponibilites.some(d => d.date === dateStr);
  }, [disponibilites]);

  // Version synchrone du statut pour l'UI (utilise uniquement le cache)
  const getDateInfoSync = useCallback((date: Date) => {
    const dateStr = dateToString(date);
    const cached = disponibilites.find(d => d.date === dateStr);
    
    if (cached) {
      return {
        statut: cached.statut,
        majoration: cached.majoration,
        motif: cached.motif,
        isCustom: true
      };
    }
    
    // D√©faut si pas en cache
    return {
      statut: 'indisponible' as const,
      majoration: 0,
      motif: 'Non configur√© par l\'admin',
      isCustom: false
    };
  }, [disponibilites]);

  // ================================
  // STATISTIQUES RAPIDES (cache local)
  // ================================
  
  const quickStats = useMemo(() => {
    const total = disponibilites.length;
    const disponibles = disponibilites.filter(d => d.statut === 'disponible').length;
    const bloques = disponibilites.filter(d => d.statut === 'bloque').length;
    const reserves = disponibilites.filter(d => d.statut === 'reserve').length;
    
    return {
      total,
      disponibles,
      bloques,
      reserves,
      indisponibles: total - disponibles - bloques - reserves
    };
  }, [disponibilites]);

  return {
    // √âtat
    disponibilites,
    isLoading,
    quickStats,

    // Actions CRUD (async)
    setDateAvailability,
    removeCustomDateAvailability,
    blockDates,
    unblockDates,
    setMultipleDatesAvailableAction,

    // Lecture (async)
    getDateInfo,
    getCustomAvailability,
    getMonthAvailability,
    isAvailableForBooking,

    // Lecture (sync - cache local pour UI)
    getDateInfoSync,
    hasCustomAvailability,

    // Statistiques
    getMonthStats,

    // Utilitaires
    forceReload
  };
};
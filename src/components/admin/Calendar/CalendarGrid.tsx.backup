import React from 'react';
import { useAdminCalendar } from '../../../hooks/calendar/useAdminCalendar';
import { isToday, isWeekend } from '../../../utils/calendar/calendarUtils';
import { isJourFerie, getNomJourFerie } from '../../../utils/calendar/holidaysData';

interface CalendarGridProps {
  onDateClick: (date: Date) => void;
}

const CalendarGrid: React.FC<CalendarGridProps> = ({ onDateClick }) => {
  const { calendar, availability, planning } = useAdminCalendar();

  const getDayClasses = (date: Date, isCurrentMonth: boolean) => {
    const baseClasses = "relative p-3 rounded-xl transition-all cursor-pointer border-2 hover:shadow-lg hover:scale-105";
    
    if (!isCurrentMonth) {
      return `${baseClasses} bg-gray-50 text-gray-400 border-gray-200 hover:bg-gray-100`;
    }

    const dateStatus = availability.getDateInfo(date);
    const hasEvents = planning.hasEvenementOnDate(date);
    const isCurrentDay = isToday(date);

    let statusClasses = "";
    
    // Couleurs selon le statut
    switch (dateStatus.statut) {
      case 'disponible':
        if (isJourFerie(date)) {
          statusClasses = "bg-purple-100 text-purple-800 border-purple-300 hover:bg-purple-200";
        } else if (isWeekend(date)) {
          statusClasses = "bg-blue-100 text-blue-800 border-blue-300 hover:bg-blue-200";
        } else {
          statusClasses = "bg-green-100 text-green-800 border-green-300 hover:bg-green-200";
        }
        break;
      case 'bloque':
        statusClasses = "bg-gray-100 text-gray-800 border-gray-300 hover:bg-gray-200";
        break;
      case 'reserve':
        statusClasses = "bg-amber-100 text-amber-800 border-amber-300 hover:bg-amber-200";
        break;
      default: // indisponible
        statusClasses = "bg-red-100 text-red-800 border-red-300 hover:bg-red-200";
        break;
    }

    // Mise en évidence jour actuel
    if (isCurrentDay) {
      statusClasses += " ring-4 ring-rose-400 shadow-xl";
    }

    // Mise en évidence si événements
    if (hasEvents) {
      statusClasses += " shadow-lg font-bold";
    }

    return `${baseClasses} ${statusClasses}`;
  };

  const getDayContent = (date: Date) => {
    const events = planning.getEvenementsForDate(date);
    const dateStatus = availability.getDateInfo(date);
    const jourFerie = getNomJourFerie(date);
    
    return (
      <>
        {/* Numéro du jour */}
        <div className="text-lg font-bold mb-2">
          {date.getDate()}
        </div>

        {/* Indicateurs */}
        <div className="space-y-1">
          {/* Statut principal */}
          <div className="text-xs font-medium">
            {dateStatus.statut === 'disponible' && '✅'}
            {dateStatus.statut === 'indisponible' && '🚫'}
            {dateStatus.statut === 'bloque' && '🔒'}
            {dateStatus.statut === 'reserve' && '📅'}
          </div>

          {/* Jour férié */}
          {jourFerie && (
            <div className="text-xs bg-purple-200 text-purple-800 px-1 py-0.5 rounded">
              🎉
            </div>
          )}

          {/* Majoration */}
          {dateStatus.majoration > 0 && (
            <div className="text-xs bg-orange-200 text-orange-800 px-1 py-0.5 rounded">
              +{dateStatus.majoration}%
            </div>
          )}

          {/* Événements */}
          {events.slice(0, 1).map(event => (
            <div 
              key={event.id}
              className="text-xs bg-rose-200 text-rose-800 px-1 py-0.5 rounded truncate"
            >
              {event.titre.substring(0, 10)}
            </div>
          ))}
          
          {/* Plus d'événements */}
          {events.length > 1 && (
            <div className="text-xs bg-gray-200 text-gray-600 px-1 py-0.5 rounded">
              +{events.length - 1}
            </div>
          )}
        </div>

        {/* Badge aujourd'hui */}
        {isToday(date) && (
          <div className="absolute -top-2 -right-2 w-8 h-8 bg-rose-500 text-white rounded-full flex items-center justify-center text-xs font-bold shadow-lg">
            🌟
          </div>
        )}
      </>
    );
  };

  return (
    <div className="p-6">
      {/* En-tête */}
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-2xl font-bold text-gray-800">
          {calendar.currentMonth.monthName} {calendar.currentMonth.year}
        </h3>
        <button
          onClick={() => availability.forceReload()}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all"
        >
          🔄 Actualiser
        </button>
      </div>

      {/* Jours de la semaine */}
      <div className="grid grid-cols-7 gap-2 mb-4">
        {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map(day => (
          <div key={day} className="text-center font-bold text-gray-700 py-3 text-sm">
            {day}
          </div>
        ))}
      </div>

      {/* Grille des jours */}
      <div className="grid grid-cols-7 gap-2">
        {calendar.currentMonth.days.map((dayInfo, index) => (
          <div
            key={index}
            className={getDayClasses(dayInfo.date, dayInfo.isCurrentMonth)}
            onClick={() => {
              console.log('🔘 Clic sur date:', dayInfo.date.toISOString().split('T')[0]);
              onDateClick(dayInfo.date);
            }}
            style={{ minHeight: '100px' }}
          >
            {getDayContent(dayInfo.date)}
          </div>
        ))}
      </div>

      {/* Légende rapide */}
      <div className="mt-6 flex flex-wrap gap-4 text-sm">
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-red-100 border border-red-300 rounded"></div>
          <span>🚫 Indisponible</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-green-100 border border-green-300 rounded"></div>
          <span>✅ Disponible</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-gray-100 border border-gray-300 rounded"></div>
          <span>🔒 Bloqué</span>
        </div>
      </div>
    </div>
  );
};

export default CalendarGrid;

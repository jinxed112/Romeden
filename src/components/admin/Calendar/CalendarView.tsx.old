import React, { useState } from 'react';
import { getMonthDays, getMonthNameFr, dateToString } from '../../../utils/calendar/calendarUtils';
import { isToday, isWeekend } from '../../../utils/calendar/calendarUtils';
import { isJourFerie } from '../../../utils/calendar/holidaysData';
import { DisponibiliteJour } from '../../../utils/types';

const CalendarView: React.FC = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [showModal, setShowModal] = useState(false);

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const monthName = getMonthNameFr(month);
  const days = getMonthDays(year, month);

  // Navigation simple
  const goToPreviousMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1));
  };

  const goToNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1));
  };

  const goToMonth = (newMonth: number) => {
    setCurrentDate(new Date(year, newMonth, 1));
  };

  const goToYear = (newYear: number) => {
    setCurrentDate(new Date(newYear, month, 1));
  };

  // Charger les disponibilités
  const loadDisponibilites = (): DisponibiliteJour[] => {
    try {
      const saved = localStorage.getItem('romeden_disponibilites');
      return saved ? JSON.parse(saved) : [];
    } catch {
      return [];
    }
  };

  // Obtenir le statut d'une date
  const getDateStatus = (date: Date) => {
    const dateStr = dateToString(date);
    const disponibilites = loadDisponibilites();
    const custom = disponibilites.find(d => d.date === dateStr);
    
    if (custom) {
      return {
        statut: custom.statut,
        majoration: custom.majoration,
        isCustom: true
      };
    }
    
    return {
      statut: 'indisponible' as const,
      majoration: 0,
      isCustom: false
    };
  };

  // Couleurs simples
  const getDateClasses = (date: Date, isCurrentMonth: boolean) => {
    if (!isCurrentMonth) {
      return "p-3 rounded-lg bg-gray-50 text-gray-400 cursor-default";
    }

    const status = getDateStatus(date);
    const isCurrentDay = isToday(date);
    
    let classes = "p-3 rounded-lg cursor-pointer transition-all hover:shadow-lg border-2 ";
    
    switch (status.statut) {
      case 'disponible':
        classes += "bg-green-100 border-green-300 text-green-800 hover:bg-green-200 ";
        break;
      case 'bloque':
        classes += "bg-gray-100 border-gray-300 text-gray-800 hover:bg-gray-200 ";
        break;
      default: // indisponible
        classes += "bg-red-100 border-red-300 text-red-800 hover:bg-red-200 ";
        break;
    }
    
    if (isCurrentDay) {
      classes += "ring-4 ring-blue-400 ";
    }
    
    return classes;
  };

  // Ouvrir modal
  const openModal = (date: Date) => {
    setSelectedDate(date);
    setShowModal(true);
  };

  // Fermer modal
  const closeModal = () => {
    setShowModal(false);
    setSelectedDate(null);
  };

  return (
    <div className="space-y-6">
      
      {/* Header */}
      <div className="bg-white rounded-3xl shadow-lg p-6">
        <h2 className="text-3xl font-bold text-center mb-4">
          <span className="bg-gradient-to-r from-rose-600 to-amber-600 bg-clip-text text-transparent">
            📅 Calendrier Admin
          </span>
        </h2>
        <p className="text-center text-gray-600">Par défaut toutes les dates sont ROUGES (indisponibles)</p>
      </div>

      {/* Navigation */}
      <div className="bg-white rounded-3xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <button
            onClick={goToPreviousMonth}
            className="px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 font-bold"
          >
            ← Précédent
          </button>
          
          <h3 className="text-2xl font-bold text-gray-800">
            {monthName} {year}
          </h3>
          
          <button
            onClick={goToNextMonth}
            className="px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 font-bold"
          >
            Suivant →
          </button>
        </div>

        <div className="flex justify-center space-x-4">
          <select
            value={month}
            onChange={(e) => goToMonth(parseInt(e.target.value))}
            className="px-4 py-2 border rounded-lg"
          >
            {Array.from({ length: 12 }, (_, i) => (
              <option key={i} value={i}>{getMonthNameFr(i)}</option>
            ))}
          </select>
          
          <select
            value={year}
            onChange={(e) => goToYear(parseInt(e.target.value))}
            className="px-4 py-2 border rounded-lg"
          >
            {[2024, 2025, 2026, 2027].map(y => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Calendrier */}
      <div className="bg-white rounded-3xl shadow-lg p-6">
        
        {/* Jours de la semaine */}
        <div className="grid grid-cols-7 gap-2 mb-4">
          {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map(day => (
            <div key={day} className="text-center font-bold text-gray-700 py-2">
              {day}
            </div>
          ))}
        </div>

        {/* Grille des jours */}
        <div className="grid grid-cols-7 gap-2">
          {days.map((dayInfo, index) => {
            const status = getDateStatus(dayInfo.date);
            return (
              <div
                key={index}
                className={getDateClasses(dayInfo.date, dayInfo.isCurrentMonth)}
                onClick={() => dayInfo.isCurrentMonth && openModal(dayInfo.date)}
                style={{ minHeight: '80px' }}
              >
                <div className="font-bold text-lg mb-1">{dayInfo.date.getDate()}</div>
                
                {dayInfo.isCurrentMonth && (
                  <div className="text-xs">
                    {status.statut === 'disponible' && '✅'}
                    {status.statut === 'indisponible' && '🚫'}
                    {status.statut === 'bloque' && '🔒'}
                    
                    {isJourFerie(dayInfo.date) && <div className="text-purple-600">🎉</div>}
                    {isWeekend(dayInfo.date) && !isJourFerie(dayInfo.date) && <div className="text-blue-600">📅</div>}
                    
                    {status.majoration > 0 && (
                      <div className="bg-orange-200 text-orange-800 px-1 rounded">
                        +{status.majoration}%
                      </div>
                    )}
                  </div>
                )}
                
                {isToday(dayInfo.date) && (
                  <div className="absolute top-1 right-1 w-3 h-3 bg-blue-500 rounded-full"></div>
                )}
              </div>
            );
          })}
        </div>
      </div>

      {/* Légende */}
      <div className="bg-white rounded-3xl shadow-lg p-6">
        <h4 className="font-bold mb-4">🏷️ Légende</h4>
        <div className="flex flex-wrap gap-4">
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-red-100 border border-red-300 rounded"></div>
            <span>🚫 Indisponible (défaut)</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-green-100 border border-green-300 rounded"></div>
            <span>✅ Disponible</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 bg-gray-100 border border-gray-300 rounded"></div>
            <span>🔒 Bloqué</span>
          </div>
        </div>
      </div>

      {/* Modal SIMPLE */}
      {showModal && selectedDate && (
        <SimpleModal
          date={selectedDate}
          onClose={closeModal}
          onSave={() => {
            closeModal();
            // Force le re-render en changeant l'état
            setCurrentDate(new Date(currentDate));
          }}
        />
      )}
    </div>
  );
};

// Modal simple qui marche
const SimpleModal: React.FC<{
  date: Date;
  onClose: () => void;
  onSave: () => void;
}> = ({ date, onClose, onSave }) => {
  const [statut, setStatut] = useState<'disponible' | 'indisponible' | 'bloque'>('indisponible');
  const [majoration, setMajoration] = useState(0);
  const [motif, setMotif] = useState('');

  const dateStr = dateToString(date);

  const handleSave = () => {
    try {
      // Charger données existantes
      const existing = localStorage.getItem('romeden_disponibilites');
      let disponibilites: DisponibiliteJour[] = existing ? JSON.parse(existing) : [];
      
      // Supprimer l'ancienne
      disponibilites = disponibilites.filter(d => d.date !== dateStr);
      
      // Ajouter la nouvelle
      disponibilites.push({
        date: dateStr,
        statut,
        majoration,
        motif: motif || undefined
      });
      
      // Sauvegarder
      localStorage.setItem('romeden_disponibilites', JSON.stringify(disponibilites));
      
      alert(`✅ SAUVEGARDÉ !\n\nDate: ${date.toLocaleDateString('fr-FR')}\nStatut: ${statut}`);
      onSave();
      
    } catch (error) {
      alert('❌ Erreur sauvegarde');
      console.error(error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-3xl p-8 max-w-lg w-full mx-4">
        
        <h3 className="text-2xl font-bold text-center mb-6">
          📅 {date.toLocaleDateString('fr-FR')}
        </h3>

        <div className="space-y-4 mb-6">
          <div>
            <label className="block font-bold mb-3">Statut :</label>
            <div className="space-y-2">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="statut"
                  value="disponible"
                  checked={statut === 'disponible'}
                  onChange={(e) => setStatut(e.target.value as any)}
                  className="w-4 h-4"
                />
                <span className="text-green-600 font-bold">✅ DISPONIBLE</span>
              </label>
              
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="statut"
                  value="indisponible"
                  checked={statut === 'indisponible'}
                  onChange={(e) => setStatut(e.target.value as any)}
                  className="w-4 h-4"
                />
                <span className="text-red-600 font-bold">🚫 INDISPONIBLE</span>
              </label>
              
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="statut"
                  value="bloque"
                  checked={statut === 'bloque'}
                  onChange={(e) => setStatut(e.target.value as any)}
                  className="w-4 h-4"
                />
                <span className="text-gray-600 font-bold">🔒 BLOQUÉ</span>
              </label>
            </div>
          </div>

          {statut === 'disponible' && (
            <div>
              <label className="block font-bold mb-2">Majoration (%) :</label>
              <input
                type="number"
                min="0"
                max="100"
                value={majoration}
                onChange={(e) => setMajoration(Number(e.target.value))}
                className="w-full p-3 border rounded-lg"
                placeholder="0"
              />
            </div>
          )}

          <div>
            <label className="block font-bold mb-2">Note :</label>
            <input
              type="text"
              value={motif}
              onChange={(e) => setMotif(e.target.value)}
              className="w-full p-3 border rounded-lg"
              placeholder="Optionnel..."
            />
          </div>
        </div>

        <div className="flex space-x-4">
          <button
            onClick={handleSave}
            className="flex-1 bg-green-500 text-white py-3 rounded-lg font-bold hover:bg-green-600"
          >
            💾 SAUVEGARDER
          </button>
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg font-bold hover:bg-gray-400"
          >
            Annuler
          </button>
        </div>
      </div>
    </div>
  );
};

export default CalendarView;

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useDevis } from '../hooks/useDevis';
import { usePrestations } from '../hooks/usePrestations';
import { formaterPrix } from '../utils/devisCalculator';
import DateSelector from '../components/devis/DateSelector';

const DevisUltra: React.FC = () => {
  const [currentStep, setCurrentStep] = useState<'category' | 'services' | 'date' | 'summary'>('category');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [majorationDate, setMajorationDate] = useState<number>(0);

  const {
    devis,
    estVide,
    ajouterItem,
    supprimerItem,
    modifierQuantite,
    toggleOption,
    getQuantiteItem,
    isOptionSelectionnee,
    getSousTotalItem,
    changerDate,
    dateEvenement
  } = useDevis();

  const { getPrestationsByCategory } = usePrestations();

  const categories = [
    { 
      id: 'anniversaire', 
      nom: 'Anniversaires', 
      emoji: 'üéÇ', 
      description: 'D√©corations f√©√©riques pour vos enfants'
    },
    { 
      id: 'babyshower', 
      nom: 'Baby Showers', 
      emoji: 'üë∂', 
      description: 'C√©l√©brez l\'arriv√©e de votre b√©b√©'
    },
    { 
      id: 'bapteme', 
      nom: 'Bapt√™mes', 
      emoji: '‚õ™', 
      description: 'Ambiances douces et spirituelles'
    },
    { 
      id: 'gender-reveal', 
      nom: 'Gender Reveals', 
      emoji: 'üéà', 
      description: 'R√©v√©lez le grand secret avec magie'
    },
    { 
      id: 'mariage', 
      nom: 'Mariages', 
      emoji: 'üíí', 
      description: 'Cr√©ations sur-mesure premium'
    }
  ];

  const prestationsCategory = selectedCategory ? getPrestationsByCategory(selectedCategory) : [];

  // Calcul du total avec majoration date
  const totalAvecMajoration = () => {
    const sousTotal = devis.total;
    const majorationMontant = (sousTotal * majorationDate) / 100;
    return sousTotal + majorationMontant;
  };

  const handleQuantiteChange = (prestationId: string, delta: number) => {
    const quantiteActuelle = getQuantiteItem(prestationId);
    const nouvelleQuantite = Math.max(0, quantiteActuelle + delta);
    
    if (nouvelleQuantite === 0) {
      supprimerItem(prestationId);
    } else if (quantiteActuelle === 0) {
      ajouterItem(prestationId);
    } else {
      modifierQuantite(prestationId, nouvelleQuantite);
    }
  };

  const handleDateSelect = (dateStr: string, majoration: number) => {
    changerDate(new Date(dateStr));
    setMajorationDate(majoration);
  };

  const nextStep = () => {
    if (currentStep === 'category' && selectedCategory) {
      setCurrentStep('services');
    } else if (currentStep === 'services' && !estVide) {
      setCurrentStep('date');
    } else if (currentStep === 'date' && dateEvenement) {
      setCurrentStep('summary');
    }
  };

  const prevStep = () => {
    if (currentStep === 'summary') setCurrentStep('date');
    else if (currentStep === 'date') setCurrentStep('services');
    else if (currentStep === 'services') setCurrentStep('category');
  };

  const stepLabels = {
    category: 'Cat√©gorie',
    services: 'Services',
    date: 'Date',
    summary: 'R√©sum√©'
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-50 to-orange-50">
      
      {/* Header Mobile-First */}
      <div className="bg-white shadow-sm border-b border-orange-100 sticky top-0 z-50">
        <div className="px-4 py-3 sm:px-6 sm:py-4">
          
          {/* Mobile Header */}
          <div className="flex items-center justify-between md:hidden">
            <button
              onClick={() => window.history.back()}
              className="p-2 text-gray-600 hover:text-gray-800 transition-colors"
            >
              ‚Üê
            </button>
            
            <div className="text-center flex-1">
              <h1 className="text-lg font-bold text-gray-800">Devis</h1>
              <p className="text-xs text-gray-600">{stepLabels[currentStep]}</p>
            </div>

            <div className="text-right">
              <p className="text-lg font-bold text-orange-600">
                {formaterPrix(totalAvecMajoration())}
              </p>
              {majorationDate > 0 && (
                <p className="text-xs text-amber-600">+{majorationDate}%</p>
              )}
            </div>
          </div>

          {/* Desktop Header */}
          <div className="hidden md:flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => window.history.back()}
                className="text-gray-600 hover:text-gray-800 transition-colors text-sm"
              >
                ‚Üê Retour
              </button>
              
              <div>
                <h1 className="text-2xl font-bold text-gray-800">Cr√©ateur de Devis</h1>
                <p className="text-gray-600 text-sm">Transformez vos r√™ves en r√©alit√©</p>
              </div>
            </div>

            {/* Progress Desktop */}
            <div className="flex items-center space-x-3">
              {['category', 'services', 'date', 'summary'].map((step, index) => {
                const isActive = currentStep === step;
                const isCompleted = ['category', 'services', 'date', 'summary'].indexOf(currentStep) > index;
                
                return (
                  <div key={step} className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium transition-colors ${
                      isActive 
                        ? 'bg-orange-400 text-white' 
                        : isCompleted
                          ? 'bg-green-400 text-white'
                          : 'bg-gray-200 text-gray-600'
                    }`}>
                      {isCompleted ? '‚úì' : index + 1}
                    </div>
                    {index < 3 && <div className="w-6 h-px bg-gray-200 mx-2"></div>}
                  </div>
                );
              })}
            </div>

            <div className="text-right">
              <p className="text-sm text-gray-600">Total estim√©</p>
              <p className="text-2xl font-bold text-orange-600">
                {formaterPrix(totalAvecMajoration())}
              </p>
              {majorationDate > 0 && (
                <p className="text-xs text-amber-600 font-medium">
                  +{majorationDate}% majoration date
                </p>
              )}
            </div>
          </div>

          {/* Mobile Progress Bar */}
          <div className="md:hidden mt-3">
            <div className="flex space-x-1">
              {['category', 'services', 'date', 'summary'].map((step, index) => {
                const isActive = currentStep === step;
                const isCompleted = ['category', 'services', 'date', 'summary'].indexOf(currentStep) > index;
                
                return (
                  <div
                    key={step}
                    className={`flex-1 h-1 rounded-full transition-colors ${
                      isActive || isCompleted ? 'bg-orange-400' : 'bg-gray-200'
                    }`}
                  />
                );
              })}
            </div>
          </div>
        </div>
      </div>

      <div className="px-4 py-6 sm:px-6 sm:py-8 lg:px-8 lg:py-12">
        <div className="max-w-4xl mx-auto">
          <AnimatePresence mode="wait">
            
            {/* √âtape 1: S√©lection cat√©gorie */}
            {currentStep === 'category' && (
              <motion.div
                key="category"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-6 sm:space-y-8"
              >
                <div className="text-center">
                  <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 sm:mb-4">
                    Mes Services Premium
                  </h2>
                  <p className="text-base sm:text-lg lg:text-xl text-gray-600 px-4">
                    Des cr√©ations magiques pour c√©l√©brer vos moments pr√©cieux
                  </p>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
                  {categories.map((category, index) => (
                    <motion.button
                      key={category.id}
                      onClick={() => {
                        setSelectedCategory(category.id);
                        setTimeout(() => nextStep(), 200);
                      }}
                      className="group p-4 sm:p-6 lg:p-8 bg-white rounded-xl sm:rounded-2xl shadow-sm hover:shadow-md border border-gray-100 transition-all duration-300 text-center touch-manipulation"
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.4, delay: index * 0.1 }}
                      whileHover={{ y: -4 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="text-4xl sm:text-5xl lg:text-6xl mb-3 sm:mb-4">{category.emoji}</div>
                      <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-2 sm:mb-3">{category.nom}</h3>
                      <p className="text-sm sm:text-base text-gray-600 leading-relaxed px-2">{category.description}</p>
                      <div className="mt-3 sm:mt-4 text-xs text-gray-500">
                        {getPrestationsByCategory(category.id).length} service{getPrestationsByCategory(category.id).length > 1 ? 's' : ''}
                      </div>
                    </motion.button>
                  ))}
                </div>
              </motion.div>
            )}

            {/* √âtape 2: S√©lection services */}
            {currentStep === 'services' && (
              <motion.div
                key="services"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-4 sm:space-y-6"
              >
                {/* Header Mobile */}
                <div className="flex items-center justify-between mb-4 sm:mb-6">
                  <button
                    onClick={prevStep}
                    className="text-gray-600 hover:text-gray-800 transition-colors text-sm sm:text-base"
                  >
                    ‚Üê Cat√©gories
                  </button>

                  <div className="text-center flex-1 mx-4">
                    <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-800 mb-1">
                      {categories.find(c => c.id === selectedCategory)?.emoji} {categories.find(c => c.id === selectedCategory)?.nom}
                    </h3>
                    <p className="text-sm sm:text-base text-gray-600 hidden sm:block">S√©lectionnez vos services</p>
                  </div>

                  <button
                    onClick={nextStep}
                    disabled={estVide}
                    className="px-3 py-2 sm:px-4 sm:py-2 bg-orange-400 hover:bg-orange-500 disabled:bg-gray-300 text-white rounded-full transition-colors disabled:cursor-not-allowed text-sm font-medium touch-manipulation"
                  >
                    Suivant ‚Üí
                  </button>
                </div>

                {/* Services */}
                <div className="space-y-4 sm:space-y-6">
                  {prestationsCategory.map((prestation, index) => {
                    const quantite = getQuantiteItem(prestation.id);
                    const sousTotal = getSousTotalItem(prestation.id);
                    const isSelected = quantite > 0;

                    return (
                      <motion.div
                        key={prestation.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.4, delay: index * 0.1 }}
                        className={`bg-white rounded-xl sm:rounded-2xl shadow-sm border transition-all duration-300 ${
                          isSelected ? 'border-orange-200 shadow-md' : 'border-gray-100 hover:shadow-md'
                        }`}
                      >
                        <div className="p-4 sm:p-6 lg:p-8">
                          
                          {/* Header service - Mobile Optimized */}
                          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-4 sm:mb-6">
                            <div className="flex-1 mb-4 sm:mb-0">
                              <div className="flex items-start justify-between sm:block">
                                <div className="flex-1">
                                  <div className="flex items-center space-x-2 sm:space-x-3 mb-2 sm:mb-3">
                                    <h4 className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-800">{prestation.nom}</h4>
                                    {isSelected && (
                                      <span className="bg-orange-100 text-orange-700 px-2 py-1 rounded-full text-xs font-medium">
                                        √ó{quantite}
                                      </span>
                                    )}
                                  </div>
                                  <p className="text-sm sm:text-base text-gray-600 mb-3 sm:mb-4 leading-relaxed">{prestation.description}</p>
                                </div>
                                
                                {/* Prix Mobile - √Ä droite du titre */}
                                <div className="text-right sm:hidden ml-2">
                                  <span className="text-xl font-bold text-orange-600">
                                    {formaterPrix(prestation.prixBase)}
                                  </span>
                                </div>
                              </div>
                              
                              {/* Prix Desktop */}
                              <div className="hidden sm:flex items-center space-x-3">
                                <span className="text-2xl lg:text-3xl font-bold text-orange-600">
                                  {formaterPrix(prestation.prixBase)}
                                </span>
                                <span className="text-sm bg-orange-50 text-orange-700 px-3 py-1 rounded-full">
                                  Prix de base
                                </span>
                              </div>
                            </div>

                            {/* Contr√¥les quantit√© - Mobile Optimized */}
                            <div className="flex items-center justify-center sm:justify-end space-x-4">
                              <button
                                onClick={() => handleQuantiteChange(prestation.id, -1)}
                                disabled={quantite === 0}
                                className="w-12 h-12 sm:w-10 sm:h-10 rounded-full bg-gray-100 hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center text-gray-600 font-bold text-xl sm:text-base touch-manipulation"
                              >
                                ‚àí
                              </button>
                              
                              <div className="text-center min-w-[80px] sm:min-w-[60px]">
                                <div className="text-2xl sm:text-xl font-bold text-gray-800">{quantite}</div>
                                <div className="text-xs text-gray-500">quantit√©</div>
                              </div>
                              
                              <button
                                onClick={() => handleQuantiteChange(prestation.id, 1)}
                                className="w-12 h-12 sm:w-10 sm:h-10 rounded-full bg-orange-400 hover:bg-orange-500 text-white transition-colors flex items-center justify-center font-bold text-xl sm:text-base touch-manipulation"
                              >
                                +
                              </button>
                            </div>
                          </div>

                          {/* Options - Mobile Optimized */}
                          {isSelected && prestation.options && prestation.options.length > 0 && (
                            <div className="border-t border-gray-100 pt-4 sm:pt-6 mt-4 sm:mt-6">
                              <h5 className="text-base sm:text-lg font-semibold text-gray-800 mb-3 sm:mb-4">Options suppl√©mentaires</h5>
                              <div className="space-y-2 sm:space-y-3">
                                {prestation.options?.map((option) => (
                                  <div
                                    key={option.id}
                                    onClick={() => toggleOption(prestation.id, option.id)}
                                    className={`p-3 sm:p-4 rounded-lg sm:rounded-xl cursor-pointer transition-all duration-200 border touch-manipulation ${
                                      isOptionSelectionnee(prestation.id, option.id)
                                        ? 'bg-orange-50 border-orange-200' 
                                        : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                                    }`}
                                  >
                                    <div className="flex items-center justify-between">
                                      <div className="flex-1">
                                        <div className="flex items-center space-x-3">
                                          <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                                            isOptionSelectionnee(prestation.id, option.id) 
                                              ? 'bg-orange-400 border-orange-400' 
                                              : 'border-gray-300'
                                          }`}>
                                            {isOptionSelectionnee(prestation.id, option.id) && (
                                              <span className="text-white text-xs">‚úì</span>
                                            )}
                                          </div>
                                          <span className="font-medium text-gray-800 text-sm sm:text-base">{option.nom}</span>
                                        </div>
                                        {option.description && (
                                          <p className="text-xs sm:text-sm text-gray-600 mt-1 ml-8">{option.description}</p>
                                        )}
                                      </div>
                                      <span className="font-semibold text-orange-600 ml-2 text-sm sm:text-base">
                                        +{formaterPrix(option.prix)}
                                      </span>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}

                          {/* Sous-total */}
                          {isSelected && (
                            <div className="border-t border-gray-100 pt-3 sm:pt-4 mt-4 sm:mt-6">
                              <div className="flex justify-between items-center p-3 sm:p-4 bg-orange-50 rounded-lg sm:rounded-xl">
                                <span className="font-semibold text-gray-800 text-sm sm:text-base">Sous-total:</span>
                                <span className="text-xl sm:text-2xl font-bold text-orange-600">
                                  {formaterPrix(sousTotal)}
                                </span>
                              </div>
                            </div>
                          )}
                        </div>
                      </motion.div>
                    );
                  })}
                </div>
              </motion.div>
            )}

            {/* √âtape 3: S√©lection date */}
            {currentStep === 'date' && (
              <motion.div
                key="date"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-6 sm:space-y-8"
              >
                <div className="text-center">
                  <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-3 sm:mb-4">
                    Choisissez votre date
                  </h2>
                  <p className="text-base sm:text-lg lg:text-xl text-gray-600 px-4">
                    Quand souhaitez-vous c√©l√©brer ?
                  </p>
                </div>

                {/* DateSelector dans un conteneur responsive */}
                <div className="bg-white rounded-xl sm:rounded-2xl shadow-sm border border-gray-100 p-3 sm:p-6 lg:p-8">
                  <DateSelector
                    onDateSelect={handleDateSelect}
                    selectedDate={dateEvenement ? dateEvenement.toISOString().split('T')[0] : ''}
                  />
                </div>

                {/* R√©capitulatif date */}
                {dateEvenement && (
                  <div className="bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl sm:rounded-2xl border border-orange-100 p-4 sm:p-6">
                    <div className="text-center">
                      <div className="text-3xl sm:text-4xl mb-2 sm:mb-3">üìÖ</div>
                      <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-2">Date s√©lectionn√©e</h3>
                      <p className="text-lg sm:text-xl lg:text-2xl font-semibold text-orange-600 mb-3">
                        {dateEvenement.toLocaleDateString('fr-FR', {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </p>
                      
                      {majorationDate > 0 && (
                        <div className="bg-amber-100 border border-amber-200 rounded-xl p-3 sm:p-4 mt-4">
                          <div className="flex items-center justify-center space-x-2">
                            <span className="text-amber-600 text-lg">‚ö°</span>
                            <div>
                              <p className="font-semibold text-amber-800 text-sm sm:text-base">Majoration appliqu√©e</p>
                              <p className="text-xs sm:text-sm text-amber-700">
                                +{majorationDate}% ‚Ä¢ {formaterPrix((devis.total * majorationDate) / 100)} suppl√©mentaires
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex justify-between">
                  <button
                    onClick={prevStep}
                    className="text-gray-600 hover:text-gray-800 transition-colors text-sm sm:text-base"
                  >
                    ‚Üê Services
                  </button>

                  <button
                    onClick={nextStep}
                    disabled={!dateEvenement}
                    className="px-4 py-2 sm:px-6 sm:py-2 bg-orange-400 hover:bg-orange-500 disabled:bg-gray-300 text-white rounded-full transition-colors disabled:cursor-not-allowed font-medium touch-manipulation"
                  >
                    Finaliser ‚Üí
                  </button>
                </div>
              </motion.div>
            )}

            {/* √âtape 4: R√©sum√© */}
            {currentStep === 'summary' && (
              <motion.div
                key="summary"
                initial={{ opacity: 0, scale: 0.98 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.98 }}
                transition={{ duration: 0.4 }}
                className="space-y-6 sm:space-y-8"
              >
                <div className="text-center">
                  <div className="text-4xl sm:text-5xl lg:text-6xl mb-3 sm:mb-4">üéâ</div>
                  <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-3 sm:mb-4">
                    Votre devis est pr√™t !
                  </h2>
                  <p className="text-base sm:text-lg lg:text-xl text-gray-600 px-4">
                    R√©capitulatif de votre √©v√©nement magique
                  </p>
                </div>

                <div className="bg-white rounded-xl sm:rounded-2xl shadow-sm border border-gray-100 p-4 sm:p-6 lg:p-8">
                  <div className="space-y-4 sm:space-y-6">
                    
                    {/* Calcul */}
                    <div className="space-y-2 sm:space-y-3 text-gray-700">
                      <div className="flex justify-between text-sm sm:text-base">
                        <span>Sous-total services :</span>
                        <span className="font-semibold">{formaterPrix(devis.total)}</span>
                      </div>
                      
                      {majorationDate > 0 && (
                        <div className="flex justify-between text-amber-600 text-sm sm:text-base">
                          <span>Majoration date (+{majorationDate}%) :</span>
                          <span className="font-semibold">
                            +{formaterPrix((devis.total * majorationDate) / 100)}
                          </span>
                        </div>
                      )}
                    </div>

                    <div className="flex justify-between items-center text-xl sm:text-2xl font-bold border-t border-gray-100 pt-3 sm:pt-4">
                      <span className="text-gray-800">Total :</span>
                      <span className="text-orange-600">
                        {formaterPrix(totalAvecMajoration())}
                      </span>
                    </div>
                    
                    <button className="w-full py-3 sm:py-4 bg-orange-400 hover:bg-orange-500 text-white font-semibold rounded-xl sm:rounded-xl transition-colors touch-manipulation">
                      Finaliser ma demande
                    </button>

                    <div className="text-center text-xs text-gray-500 mt-3 sm:mt-4">
                      ‚ö†Ô∏è Estimation gratuite et non-contractuelle
                    </div>
                  </div>
                </div>

                <div className="text-center">
                  <button
                    onClick={prevStep}
                    className="text-gray-600 hover:text-gray-800 transition-colors text-sm sm:text-base"
                  >
                    ‚Üê Modifier la date
                  </button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>

      {/* Bottom CTA Fixed Mobile */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 z-40">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-xs text-gray-600">Total</p>
            <p className="text-lg font-bold text-orange-600">
              {formaterPrix(totalAvecMajoration())}
            </p>
          </div>
          
          {currentStep !== 'summary' && (
            <button
              onClick={nextStep}
              disabled={
                (currentStep === 'category' && !selectedCategory) ||
                (currentStep === 'services' && estVide) ||
                (currentStep === 'date' && !dateEvenement)
              }
              className="px-6 py-3 bg-orange-400 hover:bg-orange-500 disabled:bg-gray-300 text-white rounded-full transition-colors disabled:cursor-not-allowed font-medium touch-manipulation shadow-lg"
            >
              {currentStep === 'category' && 'Choisir services ‚Üí'}
              {currentStep === 'services' && 'Choisir date ‚Üí'}
              {currentStep === 'date' && 'Voir r√©sum√© ‚Üí'}
            </button>
          )}
        </div>
      </div>

      {/* Spacer for fixed bottom on mobile */}
      <div className="md:hidden h-20"></div>
    </div>
  );
};

export default DevisUltra;